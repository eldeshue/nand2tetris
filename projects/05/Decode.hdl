// decode instructions to control CPU and provide instruction to RAM.
CHIP Decode {
  IN instruction[16];

  OUT 
      // a - instructions
      // 0 + 15bit instruction
      mux1, // decide instruction a or c
      // c - instructions
      // 1 xx a c1 c2 c3 c4 c5 c6 d1 d2 d3 j1 j2 j3
      mux2, // a   : decide register A or M, mux 2
      zD, nD, zAM, nAM, f, no, // c   : comp, decide ALU's function, 6bit
      wrA, wrD, wrM, // d   : dest, write signal, 3bit
      j1, j2, j3;  // j   : jump, 3bit
      
  PARTS:
  // preprocessing instructions
  // set the output
  And(a=instruction[15], b=instruction[15], out=mux1);

  And(a=instruction[15], b=instruction[12], out=mux2);

  And(a=instruction[15], b=instruction[11], out=zD);
  And(a=instruction[15], b=instruction[10], out=nD);
  And(a=instruction[15], b=instruction[9], out=zAM);
  And(a=instruction[15], b=instruction[8], out=nAM);
  And(a=instruction[15], b=instruction[7], out=f);
  And(a=instruction[15], b=instruction[6], out=no);

  Not(in=instruction[15], out=nmsfb);
  Or(a=nmsfb, b=instruction[5], out=wrA);
  And(a=instruction[15], b=instruction[4], out=wrD);
  And(a=instruction[15], b=instruction[3], out=wrM);

  And(a=instruction[15], b=instruction[2], out=j1);
  And(a=instruction[15], b=instruction[1], out=j2);
  And(a=instruction[15], b=instruction[0], out=j3);
}