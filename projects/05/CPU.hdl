// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:
    
    // PC receive a-instruction from decoder, whose msfb is 0.
    Decode(instruction=instruction, 
        mux1=m1, mux2=m2, 
        zD=zd, nD=nd, zAM=zam, nAM=nam, f=f, no=no,
        wrA=wrA, wrD=wrD, wrM=writeM,
        j1=j1, j2=j2, j3=j3);
    
    // mux 1
    Mux16(a=ALUout, b=instruction, sel=m1, out=Ain);

    // Register A
    Register(in=Ain, load=wrA, out=Aout);

    // mux 2
    Mux16(a=Aout, b=inM, sel=m2, out=AM);

    // Register D
    DRegister(in=ALUout, load=wrD, out=D);

    // ALU
    ALU(x=D, y=AM, zx=zd, nx=nd, zy=zam, ny=nam, 
        f=f, no=no, out=ALUout, zr=zr, ng=ng);

    // PC, Program Counter
    // jump(branching) needed, send load == 1 and in == ROM address
    // done executing current instructions, send inc == 1
    Not(in=m1, out=nm1);
    Branching(zr=zr, ng=ng, j1=j1, j2=j2, j3=j3, result=jmpsignal);
    PC(in=Aout, load=jmpsignal, inc=nm1, reset=reset, out=PCout);

    // change width of output data, 16bit to 15bit
    From16to15(in=Aout, out=addressM);
    From16to15(in=PCout, out=pc);

    // output data of cpu
    Not16(in=ALUout, out=ALUtemp);
    Not16(in=ALUtemp, out=outM);
}