// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
        // Put you code here:
        Parallel16(in=zx, out=zxb);   // amplify an input bit to 16 bit bus.
        Parallel16(in=nx, out=nxb);
        Parallel16(in=zy, out=zyb);
        Parallel16(in=ny, out=nyb);
        Parallel16(in=f, out=fb);
        Parallel16(in=no, out=nob);
        Not16(in=fb, out=nfb);

        Not16(in=zxb, out=nzxb);
        Not16(in=zyb, out=nzyb);
        And16(a=x, b=nzxb, out=x1); // set input 0, if the z signal is 1
        And16(a=y, b=nzyb, out=y1);

        Xor16(a=x1, b=nxb, out=x2); //16bit Xor gate can reverse the a input by n
        Xor16(a=y1, b=nyb, out=y2);

        Add16(a=x2, b=y2, out=w1); // f == 1 
        And16(a=x2, b=y2, out=w2); // f == 0

        And16(a=w1, b=fb, out=w3);
        And16(a=w2, b=nfb, out=w4);
        Or16(a=w3, b=w4, out=w5);

        Xor16(a=w5, b=nob, out=out);
        
        /* ----------------------------------------- */
        CheckZero(in=w5, out=zr);
        CheckMSB(in=w5, out=ng); 
}