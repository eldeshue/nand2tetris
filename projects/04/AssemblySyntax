<hack system의 어셈블리어 문법 정리>

1. 명령어는 크게 2종류로 나뉨.
  - a 명령어
  a 명령어는 소위 address, 즉 주소나 symbol을 활용해서 메모리에 데이터를 할당하는 명령어임.
  따라서 @이나 =을 이용하여 A나 D레지스터에서 특정 메모리로 데이터를 저장함.
  - c 명령어
  c 명령어는 compute, data를 활용하여 논리 및 산술연산을 수행함.
  이를 위해서는 a 명령어를 통한 할당이 선행되어야 함.
  
  dest=comp;jump
  dest는 연산의 결과가 저장될 레지스터
  comp는 피연산자와 연산자. ex) a, a+b, a|b, ...
  jump는 분기를 위한 조건을 선언함. JMP, JGE, JLE, JLT,...

2. 모든 연산은 레지스터 사이에서만 이루이질 수 있다(어셈블리 공통사항).
  모든 데이터는 메모리에 저장되는 것이 기본이다. 하지만,
  어셈블리에서는 연산을 위해서는 레지스터(누산기, A 및 D)에 상수 혹은 변수를 
  load할 필요가 있다.
  따라서 a 명령어를 활용한 변수의 할당이 필요하다.(load)
  또한 연산을 위해서는 D레지스터에도 데이터를 옮겨줄 필요가 있다.(mov)

  메모리에서 누산기(A레지스터)에 load함에는 크게 두 가지 방법이 있다. 
    - 임의의 symbol을 누산기에 load하고, 이를 M으로 참조하여 할당함.
    ex) @symbol
        M=1
    - 실재 주소값을 누산기에 load하고, 이를 M으로 참조하여 데이터를 할당.
    ex) @15
        M=1
  사실상 symbol은 변수가 아니다. 사실은 매크로로 정의된 주소값이라 할 수 있다. 
  그렇기에 symbol일 할당된 A레지스터 또한 M으로 참조된다.

    c.f) 누산기에 상수값을 할당
        @15
        D=D+A
    즉, 주소값을 할당하고 참조하는 것과 상수값을 바로 사용하는 것을 혼동해선 안된다.
